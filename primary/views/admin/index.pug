//-
	Admin index. Provides links to various administative pages.
		admin/indexadmin.js	
		'/admin'
	//
extends ../layout
block content
	h3=title
	div(class="w3-container w3-section")
		h4 Resync
		a(href="/admin/sync/resyncteams") 
			div(class="gear-btn theme-link w3-btn w3-section")
				span Resync all teams in the database
		a(href="/admin/sync/recalcderived") 
			div(class="gear-btn theme-link w3-btn w3-section")
				span Recalc derived metrics
		//- form(action="/admin/sync/resyncevents" method="GET")
			input(type="text" class="theme-input" name="year" value="2020")
			input(type="text" class="theme-input" style="width: 50px" name="start" value="m")
			input(type="text" class="theme-input" style="width: 50px"  name="end" value="n")
			input(type="submit" class="theme-submit w3-btn" value="Resync events")
		div
			input(type="text" class="theme-input w3-margin-right" name="year" value=new Date().getFullYear())
			div(class="theme-submit w3-btn" id="btnResync") Resync events
		a(href="/admin/dngn3") 
			div(class="gear-btn theme-link w3-btn w3-section")
				span Use Case 3
	div(class="w3-container w3-section")
		h4 TBA Data
		a(href="/admin/externaldata/events") 
			div(class="gear-btn theme-link w3-btn")
				span Events
		a(href=`/admin/externaldata/matches?event_key=${event_key}`) 
			div(class="gear-btn theme-link w3-btn")
				span Match data
		a(href="/admin/externaldata/teams") 
			div(class="gear-btn theme-link w3-btn")
				span All teams (Load page with caution)

	div(class="w3-container w3-section")
		h4 Orgs
		a(href="/admin/orgs")
			div(class="gear-btn theme-link w3-btn")
				span List of orgs

	div(class="w3-container w3-section")
		h4 Testing functions - CAREFUL
		a(href="/admin/tests")
			div(class="gear-btn theme-link w3-btn") QUnit tests
		a(href="/admin/sitemap")
			div(class="gear-btn theme-link w3-btn") 
				span Site map (Links to every page for testing)
		a(href="/notifications")
			div(class="gear-btn theme-link w3-btn") 
				span Notifications testing page

	script.
		$('#btnResync').on('click', resyncEvents);
	
		function resyncEvents() {
			//- var alphabet = 'abcdefghijklmnopqrstuvwxyz'; // Events are synced by letter in sync.js
			
			const year = $('input[name=year]').val();
			const appender = ' _X to cancel syncing teams_'
			var cancelled = false;
			
			
			var card = new NotificationCard('Retrieving events...' + appender, {
				exitable: true, 
				ttl: 0,
				darken: true,
				onexit: () => {
					cancelled = true;
				}
			});
			card.show();
			
			$.post('/admin/sync/resynceventlist', {year: year})
				.done(async data => {
					card.setText(data.message + appender); // show message
					let numCompleted = 0;
					let totalEvents = data.length;
					
					//- 2023-02-17 JL: Sync events in blocks of 10 instead of by letter, b/c there are too many that start with the letter m & sometimes leads to timeouts
					const INTERVAL = 10;
					for (let i = 0; i < totalEvents; i += INTERVAL) {
						let start = i;
						let end = Math.min(i + INTERVAL, totalEvents);
						console.log(`Requesting ${start} to ${end}`);
						
						card.setText(`Getting teams for events... [${start+1}-${end} of ${totalEvents}] ${appender}`);
						
						if (cancelled) return;
						
						let url = `/admin/sync/resynceventteams?year=${year}&start=${start}&end=${end}`;
						let result = await promisify(url);
						//- sanity check
						if (!result.includes('SUCCESS')) {
							card.remove();
							NotificationCard.error(`Sync not successful. Message: ${result}`, {ttl: 0, exitable: true});
							return;
						}
						//- get number of events enriched
						let number = parseInt(result.replace(/SUCCESS.*updated /g, ''));
						if (number !== INTERVAL) console.warn(`Number completed this step and request interval does not match!! numCompletedThisStep=${number} interval=${INTERVAL}`);
						numCompleted += number;
					}
					card.remove();
					NotificationCard.good(`Done syncing events: ${numCompleted} of ${totalEvents}`, {ttl: 0, exitable: true})
					
					/*
					for (let letter of alphabet) {
						if (cancelled) return;
						
						let url = `/admin/sync/resyncevents?year=${year}&start=${letter}&end=${letter}`;
						let result = await promisify(url);
						//- sanity check
						if (!result.includes('SUCCESS')) {
							card.remove();
							NotificationCard.error(`Sync not successful. Message: ${result}`, {ttl: 0, exitable: true});
							return;
						}
						//- get number of events enriched
						let number = parseInt(result.replace(/SUCCESS.*updated /g, ''));
						numCompleted += number;
						card.setText(`Getting teams for events... [${numCompleted} of ${totalEvents}] ${appender}`);
					}
					card.remove();
					NotificationCard.good(`Done syncing events: ${numCompleted} of ${totalEvents}`, {ttl: 0, exitable: true})
					*/
				}
			);
			function promisify(url) {
				return new Promise((resolve, reject) => {
					$.get(url).done(resolve).fail(reject);
				})
			}
		}
	
		function submitHook()
		{
			//console.log(selectedArray.toString());
			//document.getElementById("selectedString").innerHTML = selectedArray.toString();

			//document.getElementById("posttowebhookdata").value = JSON.stringify(selectedDict);
			
			document.getElementById("posttowebhook").submit();
		}
