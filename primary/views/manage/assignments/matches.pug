extends ../../layout
block content
	div.w3-auto
		h2=title
		hr
		h4!=msg('manage.assignments.checkUncheckSubteamMembers')
		div(class=`responsive-grid rg-4`)
			each subteam in subteams
				div(class="w3-padding w3-left-align")
					input(type="checkbox" class="w3-check subteamToggle" id=`toggleSubteam_${subteam.subteam_key}` data-pit-scout=(subteam.pit_scout) checked=(subteam.pit_scout) data-subteam-key=subteam.subteam_key)
					label(for=`toggleSubteam_${subteam.subteam_key}`) &nbsp;#{subteam.label}
		hr
		- const markPresentUrl = '/manage/members/present?rdr=/manage/assignments/matches';
		h4!=msg('manage.assignments.availablePotentialScouters.main')
			span(class="sprite sp-20 sp-info sp-inline w3-tooltip")
				span(class="w3-tooltiptext w3-medium contains-link")!=msgMarked('manage.assignments.availablePotentialScouters.tooltip', {url: markPresentUrl})
		form(action="/manage/assignments/matches/generate" method="post")
			div(class="responsive-grid rg-4 w3-left-align")
				each member in available
					div(class="w3-padding")
						input(type="checkbox" class="w3-check" name=`${member._id}|${member.name}` id='chk_'+member._id data-subteam-key=member.org_info.subteam_key)
						label(class="w3-text-white" for='chk_'+member._id) &nbsp;#{member.name}
							span(class="unimportant")  (#{member.org_info.subteam_key})
						br
			if available.length === 0
				h6(class="i contains-link")!=msgMarked('manage.assignments.availablePotentialScouters.noneFound', {url: markPresentUrl})
			//- Only display the assign button if there are some available scouters
			else
				- var defaultBlockSize = 5;
				p
				label !{msg('manage.assignments.blockSize.main')}&nbsp;
				select(class="theme-input theme-inline-padding w3-no-border" style="float: none" type="text" name="blockSize")
					each val in [1, 2, 3, 4, 5, 6, 7, 8]
						if( val == defaultBlockSize )
							option(value=val class="w3-bar-item" selected) #{val}
						else
							option(value=val class="w3-bar-item") #{val}
				//- label &nbsp;matches
				span(class="sprite sp-18 sp-help sp-inline w3-tooltip")
					span(class="w3-tooltiptext w3-left-align")!=msgMarked('manage.assignments.blockSize.tooltipAssignees')
				br
				input(type="checkbox" class="w3-check" name='skipBreaks' id='skipBreaks')
				label  !{msg('manage.assignments.skipBreaks')}&nbsp;
				p
				input(type="checkbox" class="w3-check" name='scoutPlayoffs' id='scoutPlayoffs')
				label  !{msg('manage.assignments.scoutPlayoffs')}&nbsp;

				p
				button(type="submit" class="w3-btn theme-submit")!=msg('manage.assignments.assignMatchTeams')
		hr
		div(class='w3-row')
			h4!=msg('manage.members.importExport')
		div(class='w3-row')
			form#addMembers(action='javascript:writeAssignments()' method='post')
				input#fileUpload(type='file' accept='.json,application/json' class='w3-hide')
				div(class='w3-col m1 s6 w3-padding-small')
					button(type='submit' class='w3-btn theme-submit w3-block')!=msg('upload')
				div(class='w3-padding-small w3-col m2 s6')
					label(for='fileUpload' class='w3-btn w3-block theme-submit')!=msg('manage.members.selectAFile')
				div(class='w3-padding-small w3-col mauto')
					div(class="theme-inline-padding")#fileName!=msg('manage.members.noFileSelected')
	script.
		let toggleSubteamCheckboxes = $('.subteamToggle');
		let pitScoutCheckboxes = $('[data-pit-scout]');
		
		//- Auto-check students who are in a pit-scout subteam
		for (let checkbox of pitScoutCheckboxes) {
			let subteam_key = checkbox.getAttribute('data-subteam-key');
			assert(subteam_key);
			checkStudentsOfSubteam(subteam_key, true);
		}
		
		toggleSubteamCheckboxes.on('click', function () {
			let subteam_key = this.getAttribute('data-subteam-key');
			checkStudentsOfSubteam(subteam_key, this.checked);
		})
		
		function checkStudentsOfSubteam(subteam_key, isChecked) {
			$(`[data-subteam-key="${subteam_key}"]`).prop('checked', isChecked);
		}
		
		function confirmThenPost(message, url) {
			Confirm.show(message).then((result) => {
				if (!result.cancelled) {
					$.post(url, 
						{}, 
						function( data, status ){
							if(data && data.message) {
								// error
								if (data.status && data.status >= 400)
									NotificationCard.error(data.message);
								// success/message
								else
									NotificationCard.show(data.message);
							}
						}
					);
				}
			})
		}

		$('#fileUpload').on('change', () => {
			const files = $('#fileUpload')[0].files;
			if (files.length > 0) {
				$('#fileName').text(files[0].name);
			}
		})

		function writeAssignments(event) {
			console.log(event);
			const file = $('#fileUpload')[0].files[0];
			if (!file) {
				NotificationCard.error('No file selected.');
				return;
			} else if (file.type !== 'application/json') {
				NotificationCard.error('Invalid file type (must be JSON).');
				return;
			}
			file.text().then(text => {
				text = text.replace(/\r\n/g, '\n').trim();
				$.post({
					url: '/manage/assignments/matches/upload',
					data: text,
					contentType: 'application/json',
				}).done(response => {
					if (response.status === 200) {
						NotificationCard.show(response.message);
						setTimeout(() => {
							window.location.href = '/dashboard/matches';
						}, 1000);
					} else {
						NotificationCard.error(response.message, {ttl: 0, exitable: true});
					}
				}).fail(() => {
					NotificationCard.error('Failed to upload members, perhaps due to a syntax error in the JSON file.');
				});
			});
		}
		
		//- todo: delete button for match assignments and data