/**
 * This module was automatically generated by `ts-interface-builder`
 */
import * as t from "ts-interface-checker";
// tslint:disable:object-literal-key-quotes

export const NumericalDict = t.iface([], {
  [t.indexKey]: "number",
});

export const StringDict = t.iface([], {
  [t.indexKey]: "string",
});

export const integer = t.name("number");

export const formDataOutput = t.union("number", "boolean", "string", "null");

export const MatchFormData = t.iface([], {
  [t.indexKey]: "formDataOutput",
});

export const AnyDict = t.iface([], {
  [t.indexKey]: t.union("string", "number", "boolean", "null", "undefined"),
});

export const DbDocument = t.iface([], {
  "_id": t.opt("ObjectId"),
});

export const DbDocumentWithNumberId = t.iface([], {
  "_id": t.opt("number"),
});

export const AggRange = t.iface(["DbDocument"], {
  "org_key": "OrgKey",
  "event_key": "EventKey",
  "key": "string",
  "MINmin": "number",
  "MINmax": "number",
  "AVGmin": "number",
  "AVGmax": "number",
  "VARmin": "number",
  "VARmax": "number",
  "MAXmin": "number",
  "MAXmax": "number",
});

export const Event = t.iface(["DbDocument"], {
  "city": t.union("string", "null"),
  "country": "string",
  "district": t.union("string", "null"),
  "end_date": "string",
  "event_code": "string",
  "event_type": "number",
  "key": "EventKey",
  "name": "string",
  "start_date": "string",
  "state_prov": "string",
  "year": "number",
  "team_keys": t.array("TeamKey"),
  "timezone": t.opt(t.union("string", "null")),
});

export const FormSliderOptions = t.iface([], {
  "min": "number",
  "max": "number",
  "step": "number",
});

export const Layout = t.iface(["DbDocument"], {
  "year": "number",
  "order": t.union("number", "string"),
  "type": t.union(t.lit('checkbox'), t.lit('counter'), t.lit('counterallownegative'), t.lit('badcounter'), t.lit('slider'), t.lit('timeslider'), t.lit('multiselect'), t.lit('textblock'), t.lit('h2'), t.lit('h3'), t.lit('spacer'), t.lit('derived')),
  "form_type": t.union(t.lit('matchscouting'), t.lit('pitscouting')),
  "org_key": "OrgKey",
  "label": t.opt("string"),
  "id": t.opt("string"),
  "options": t.opt(t.union("FormSliderOptions", t.array("string"))),
});

export const LayoutEdit = t.iface(["Omit"], {
  "year": t.opt("number"),
  "form_type": t.opt(t.union(t.lit('matchscouting'), t.lit('pitscouting'))),
  "org_key": t.opt("OrgKey"),
  "order": t.opt(t.union("number", "string")),
});

export const DerivedLayout = t.iface(["Layout"], {
  "type": t.lit('derived'),
  "operations": t.array("DerivedOperation"),
  "id": "string",
  "display_as": t.opt("string"),
});

export const DerivedOperation = t.iface([], {
  "operator": "string",
  "as": t.opt("string"),
});

export const operand = t.union("number", "string");

export const MultiplyOperation = t.iface(["DerivedOperation"], {
  "operator": t.lit('multiply'),
  "operands": t.array("operand"),
});

export const SumOperation = t.iface(["DerivedOperation"], {
  "operator": t.union(t.lit('sum'), t.lit('add')),
  "operands": t.array("operand"),
});

export const SubtractOperation = t.iface(["DerivedOperation"], {
  "operator": t.lit('subtract'),
  "operands": t.tuple("operand", "operand"),
});

export const DivideOperation = t.iface(["DerivedOperation"], {
  "operator": t.lit('divide'),
  "operands": t.tuple("operand", "operand"),
});

export const MultiselectOperation = t.iface(["DerivedOperation"], {
  "quantifiers": "NumericalDict",
  "id": "string",
});

export const ConditionOperation = t.iface(["DerivedOperation"], {
  "operator": t.lit('condition'),
  "operands": t.tuple("string", t.union("string", "number", "null"), t.union("string", "number", "null")),
});

export const CompareOperation = t.iface(["DerivedOperation"], {
  "operator": t.union(t.lit('gt'), t.lit('gte'), t.lit('lt'), t.lit('lte'), t.lit('eq'), t.lit('ne')),
  "operands": t.tuple("operand", "operand"),
});

export const MinMaxOperation = t.iface(["DerivedOperation"], {
  "operator": t.union(t.lit('min'), t.lit('max')),
  "operands": t.tuple("operand", "operand"),
});

export const LogOperation = t.iface(["DerivedOperation"], {
  "operator": t.lit('log'),
  "operands": t.tuple("operand", "number"),
});

export const AbsoluteValueOperation = t.iface(["DerivedOperation"], {
  "operator": t.lit('abs'),
  "operands": t.tuple("operand"),
});

export const Match = t.iface(["DbDocument"], {
  "key": "MatchKey",
  "event_key": "EventKey",
  "comp_level": "CompLevel",
  "set_number": "number",
  "match_number": "number",
  "alliances": t.iface([], {
    "red": "MatchAllianceInfo",
    "blue": "MatchAllianceInfo",
  }),
  "winning_alliance": t.union(t.lit('red'), t.lit('blue'), t.lit('')),
  "score_breakdown": t.iface([], {
    "red": "AnyDict",
    "blue": "AnyDict",
  }),
  "videos": t.opt(t.array("MatchVideo")),
  "time": "number",
  "actual_time": t.union("number", t.lit('')),
  "predicted_time": "number",
  "post_result_time": t.opt("number"),
  "manually_entered": t.opt("boolean"),
});

export const ScouterRecord = t.iface([], {
  "id": "number",
  "name": "string",
});

export const MatchScouting = t.iface(["DbDocument"], {
  "year": "number",
  "event_key": "EventKey",
  "org_key": "OrgKey",
  "match_key": "MatchKey",
  "match_number": "number",
  "time": "number",
  "alliance": t.union(t.lit('red'), t.lit('blue')),
  "team_key": "TeamKey",
  "match_team_key": "MatchTeamKey",
  "assigned_scorer": t.opt("ScouterRecord"),
  "actual_scorer": t.opt("ScouterRecord"),
  "data": t.opt("MatchFormData"),
  "super_data": t.opt("MatchFormData"),
  "useragent": t.opt("UserAgent"),
});

export const Org = t.iface(["DbDocument"], {
  "org_key": "OrgKey",
  "nickname": "string",
  "team_number": t.opt("integer"),
  "team_numbers": t.opt(t.array("integer")),
  "team_key": t.opt("TeamKey"),
  "team_keys": t.opt(t.array("TeamKey")),
  "default_password": "string",
  "config": t.iface([], {
    "members": t.iface([], {
      "subteams": t.array("OrgSubteam"),
      "classes": t.array("OrgClass"),
    }),
    "columnDefaults": "StringDict",
  }),
  "event_key": t.union("EventKey", "null"),
});

export const OrgSubteam = t.iface([], {
  "label": "string",
  "subteam_key": "string",
  "pit_scout": "boolean",
});

export const OrgClass = t.iface([], {
  "label": "string",
  "class_key": "string",
  "seniority": "number",
  "youth": "boolean",
});

export const OrgTeamValue = t.iface(["DbDocument"], {
  "org_key": "OrgKey",
  "team_key": "TeamKey",
  "event_key": "EventKey",
  "value": "number",
});

export const TBAApiHeaders = t.iface(["DbDocument"], {
  "name": t.lit('tba-api-headers'),
  "headers": "StringDict",
});

export const FIRSTApiHeaders = t.iface(["DbDocument"], {
  "name": t.lit('first-api-headers'),
  "headers": "StringDict",
});

export const TBAWebhookSecret = t.iface(["DbDocument"], {
  "name": t.lit('tba-webhook-secret'),
  "secret_key": "string",
});

export const WebPushKeys = t.iface(["DbDocument"], {
  "name": t.lit('web_push_keys'),
  "public_key": "string",
  "private_key": "string",
});

export const PasswordItem = t.union("TBAApiHeaders", "FIRSTApiHeaders", "TBAWebhookSecret", "WebPushKeys");

export const PitScoutingSet = t.iface(["DbDocument"], {
  "primary": "ScouterRecord",
  "secondary": t.opt("ScouterRecord"),
  "tertiary": t.opt("ScouterRecord"),
});

export const PitScouting = t.iface(["DbDocument"], {
  "year": "number",
  "event_key": "EventKey",
  "org_key": "OrgKey",
  "team_key": "TeamKey",
  "primary": t.opt("ScouterRecord"),
  "secondary": t.opt("ScouterRecord"),
  "tertiary": t.opt("ScouterRecord"),
  "actual_scouter": t.opt("ScouterRecord"),
  "data": t.opt("StringDict"),
  "super_data": t.opt("StringDict"),
  "useragent": t.opt("UserAgent"),
});

export const RankingPoints = t.iface(["DbDocument"], {
  "year": "number",
  "attributes": t.array("RankingPoint"),
});

export const RankingPoint = t.iface(["DbDocument"], {
  "label": "string",
  "name": "string",
  "abbr": "string",
});

export const Ranking = t.iface(["DbDocument"], {
  "dq": "number",
  "extra_stats": t.array("any"),
  "matches_played": "number",
  "qual_average": "any",
  "rank": "number",
  "record": t.iface([], {
    "losses": "number",
    "ties": "number",
    "wins": "number",
  }),
  "sort_orders": t.array("number"),
  "team_key": "TeamKey",
  "event_key": "EventKey",
});

export const Role = t.iface(["DbDocument"], {
  "role_key": "RoleKey",
  "label": "string",
  "access_level": "integer",
});

export const ScoutingPair = t.iface(["DbDocument"], {
  "member1": "ScouterRecord",
  "member2": t.opt("ScouterRecord"),
  "member3": t.opt("ScouterRecord"),
  "org_key": "OrgKey",
});

export const Session = t.iface(["DbDocument"], {
  "expires": "Date",
  "lastModified": "Date",
  "session": "string",
});

export const LuciaSession = t.iface(["DbDocument"], {
  "expiresAt": "Date",
  "user_id": t.opt("number"),
  "attributes": "any",
});

export const TeamAvatar = t.iface(["DbDocument"], {
  "team_number": "integer",
  "event_year": "integer",
  "encoded_avatar": "string",
});

export const Team = t.iface(["DbDocument"], {
  "address": t.union("string", "null"),
  "city": t.union("string", "null"),
  "country": t.union("string", "null"),
  "gmaps_place_id": "any",
  "gmaps_url": "any",
  "key": "TeamKey",
  "lat": "any",
  "lng": "any",
  "location_name": "any",
  "motto": t.union("string", "null"),
  "name": "string",
  "nickname": "string",
  "postal_code": t.union("string", "null"),
  "rookie_year": t.union("number", "null"),
  "school_name": t.union("string", "null"),
  "state_prov": t.union("string", "null"),
  "team_number": "number",
  "website": t.union("string", "null"),
});

export const TeamSimple = t.iface(["DbDocument"], {
  "city": t.union("string", "null"),
  "country": t.union("string", "null"),
  "key": "TeamKey",
  "name": "string",
  "nickname": "string",
  "state_prov": t.union("string", "null"),
  "team_number": "number",
});

export const Upload = t.iface(["DbDocument"], {
  "org_key": "OrgKey",
  "year": "number",
  "team_key": "TeamKey",
  "uploader": t.iface([], {
    "name": "string",
    "id": "string",
    "useragent": "UserAgent",
    "upload_time": "number",
  }),
  "s3_key": "string",
  "index": "number",
  "removed": t.opt("boolean"),
});

export const User = t.iface(["DbDocumentWithNumberId"], {
  "org_key": "OrgKey",
  "name": "string",
  "role_key": "RoleKey",
  "password": t.union(t.lit('default'), t.lit('disabled'), "string"),
  "org_info": t.iface([], {
    "subteam_key": "string",
    "class_key": "string",
    "years": t.union("string", "number"),
    "seniority": t.union("string", "number"),
  }),
  "event_info": t.iface([], {
    "present": "boolean",
    "assigned": "boolean",
  }),
  "oauth": t.iface([], {
    "github_id": t.opt("number"),
  }),
  "visible": "boolean",
  "removed": "boolean",
  "push_subscription": t.opt("PushSubscription"),
});

export const RoleKey = t.union(t.lit('scouter'), t.lit('viewer'), t.lit('team_admin'), t.lit('global_admin'));

export const OrgKey = t.name("string");

export const EventKey = t.name("string");

export const MatchKey = t.name("string");

export const MatchTeamKey = t.name("string");

export const TeamKey = t.name("string");

export const CompLevel = t.union(t.lit('qm'), t.lit('qf'), t.lit('sf'), t.lit('f'));

export const UserAgent = t.iface([], {
  "ip": "string",
  "device": "string",
  "os": "string",
  "browser": "string",
});

const exportedTypeSuite: t.ITypeSuite = {
  NumericalDict,
  StringDict,
  integer,
  formDataOutput,
  MatchFormData,
  AnyDict,
  DbDocument,
  DbDocumentWithNumberId,
  AggRange,
  Event,
  FormSliderOptions,
  Layout,
  LayoutEdit,
  DerivedLayout,
  DerivedOperation,
  operand,
  MultiplyOperation,
  SumOperation,
  SubtractOperation,
  DivideOperation,
  MultiselectOperation,
  ConditionOperation,
  CompareOperation,
  MinMaxOperation,
  LogOperation,
  AbsoluteValueOperation,
  Match,
  ScouterRecord,
  MatchScouting,
  Org,
  OrgSubteam,
  OrgClass,
  OrgTeamValue,
  TBAApiHeaders,
  FIRSTApiHeaders,
  TBAWebhookSecret,
  WebPushKeys,
  PasswordItem,
  PitScoutingSet,
  PitScouting,
  RankingPoints,
  RankingPoint,
  Ranking,
  Role,
  ScoutingPair,
  Session,
  LuciaSession,
  TeamAvatar,
  Team,
  TeamSimple,
  Upload,
  User,
  RoleKey,
  OrgKey,
  EventKey,
  MatchKey,
  MatchTeamKey,
  TeamKey,
  CompLevel,
  UserAgent,
};
export default exportedTypeSuite;
